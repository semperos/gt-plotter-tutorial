{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-26T22:23:22.345-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:15:00.225928-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "DUBe8j/ADQC2gGY9DvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This is the second walk-through. See [[I. GtPlotterHorizontalBarChart Walk-through]] for the first one."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:15:42.775863-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:15:42.775863-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qhTIlGDADQCSOgmxDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I want to be able to render *two* lines on a line chart. That is going to be my goal for this walk-through."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:16:27.606326-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:16:27.606326-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ZS50l2DADQCZWSyJDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I'm also not going to try to make the class work from my own intuition about, e.g., raw array data; I'm going to go straight into working examples and try to lift out minimally-working parts, and then head straight for \"render two lines.\" I know there are some existing examples that render multiple lines, so this should be straightforward."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:16:30.434176-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:16:30.434176-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "h1Sfl2DADQCZov4DDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Examples"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:18:42.389897-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:18:42.389897-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "H8x8n2DADQCcUX5EDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "There's an example chart I've seen using Git commit data that renders a line chart with multiple lines. Let's go find it!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:16:45.367935-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:18:56.279139-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ODODmGDADQCcJSiEDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "{{gtExample:name=GtPlotterLineChartExamples>>plotCommitsPerUser}} "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:19:37.952962-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:20:54.160667-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "a6DMomDADQCdG0+iDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Just by viewing the example code, it seems like the {{gtClass:name=GtPlotterLineChart}} class does more work on our behalf. This code didn't have to calculate the maximum for the scale of either axis. It's also interpreting the `aData` to derive multiple lines. Let's investigate the data in question."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:21:01.568512-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:21:14.391192-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FGXIp2DADQClIvZ+DvhR+w=="
				},
				"code" : "GtPlotterLineChartExamples new commitsAndUserDataGroupedByUser"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:22:15.88188-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:22:15.88188-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "r3E2rGDADQCpv1wFDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "If we dig into the implementation, we see a data processing pipeline that looks like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:21:43.26706-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:22:22.650512-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QsREqmDADQCme9a0DvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "1. Raw data formatted as an array of arrays"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:22:22.906835-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:23:08.097234-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "yKKhrGDADQCp6QwaDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "2. For each sub-array, a dictionary is produced with uniform keys (here `#date`, `#user`, and `#commits`)"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:23:08.583238-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:23:40.546033-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CpVar2DADQCszeplDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "3. That array of dictionaries is fed to an instance of {{gtClass:name=GtPlotterDataGroup}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:23:22.806249-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:25:12.983182-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "PJ0zsGDADQCuKqs+DvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "4. That instance is further manipulated by passing the {{gtMethod:name=GtPlotterDataEntity>>groupedBy:labelled:colored:}}  message for grouping by user and referencing a predefined color palette for each user."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:26:49.077174-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:28:18.150634-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ZzlfvGDADQCzNQiTDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Side note: As of 2023-08-28, I had to realize that the `groupedBy:labelled:colored:` method was not on the `GtPlotterDataGroup` class and had to go looking directly at the superclasses. It would be a cool extension of the auto-complete mechanism here in Lepiter if superclass methods were also shown and the correct class updated if one of those methods were selected."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:28:20.257976-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:29:03.766764-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "t2DuwWDADQC86jmqDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So it appears that simply by having logical groups defined in the data entity, that the GtPlotterLineChart will render each group as a separate line. Let's see if we can find where the chart's implementation handles that."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:29:12.247815-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:29:59.43858-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "p64HxWDADQCCMKQuDvhR+w=="
				},
				"code" : "GtPlotterLineChart new."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:30:01.789591-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:31:09.379281-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bJ/7x2DADQCC2tmwDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I know from analyzing the bar chart, that the {{gtMethod:name=GtPlotterLineChart>>create}} method is likely the entry-point for the chart's rendering. Looking there, I see there's a call to {{gtMethod:name=GtPlotterLineChart>>newContentElement}} which seems to be the spot where lines are produced."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:31:30.222036-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:31:50.73596-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7flAzWDADQCIzwcSDvhR+w=="
				},
				"code" : "GtPlotterLineChart >> #newContentElement"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:32:26.002512-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:33:05.471622-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "BSOU0GDADQCJ2rRwDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The implementation calls {{gtMethod:name=GtPlotterDataEntity>>groupsCollect:}} which produces a stream of all the groupings. For each group, another method is called the creates the actual line shapes:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:33:12.110334-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:34:49.609012-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "J6xT02DADQCOrWoNDvhR+w=="
				},
				"code" : "GtPlotterLineChart >> #newContentLineElementFor:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:35:43.863086-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:36:02.011781-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qEk622DADQCP0n69DvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The line for each group is an instance of {{gtClass:name=BlNormalizedPolyline}}."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:36:29.86779-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:44:34.817745-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "636A3WDADQCSYI8VDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "What I find compelling, is that you only have to step 2 or 3 methods into the implementation to get to the geometry of putting the charts together. I was expecting far more layers of abstraction to have to wade through. This feels quite empowering!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:46:51.227312-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:46:55.726415-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+msmBGHADQCegYgeDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Beyond Simple Grouping"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:44:35.344211-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:46:44.215957-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KwUN/GDADQCaCNTxDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "What I want for own immediate needs is a line chart where there are two lines, one of which is rendered distinctly from the other. For example, I'd like to have one be a solid line, the other a dashed line."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:47:04.165183-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T13:47:53.421935-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FdjrBGHADQCfAnIPDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "While the \"plot each group\" behavior of the line chart as described above is powerful and nicely generic, let's see what it will take to draw two lines with more difference in their appearance."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:06:15.524316-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:06:30.133049-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LCyMSWHADQCkO3GCDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I'm going to start just with the line shape itself, so I can understand how that is rendered."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:06:33.360401-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T21:42:35.39832-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "RVecSmHADQCmpwzTDvhR+w=="
				},
				"code" : "BlElement new\r\tgeometry: (BlNormalizedPolyline\r\t\t\tvertices: {1 @ 2.\r\t\t\t\t\t3 @ 4.\r\t\t\t\t\t4 @ 3});\r\tborder: (BlBorder paint: Color red width: 1);\r\toutskirts: BlOutskirts centered"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:28:05.898366-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:28:31.14916-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "tKIxlmHADQCnZ6DtDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I'm guessing the {{gtClass:name=BlBorder}} is the class to look into, and it looks like there's a notion of \"stroke style\" that might let me specify something like \"dashed\". Let's dig further."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:28:31.620655-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:29:21.621802-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "rCkvmWHADQCscUmsDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I use the global Spotter tool to search for \"strokestyle\" and find the {{gtClass:name=BlStrokeStyle}} class."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:29:21.882863-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T14:31:05.884084-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qFIunGHADQCvV6jiDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Learning Moment: Naming parameter names that are designed to accept instances of a particular class in this way, i.e., `aStrokeStyle`, made it possible for me to go find the related class. I've been struggling with whether to name my parameters such that they're a better fit for the calling code or the method implementation, and this suggests that keeping the caller in mind is most important."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-28T21:42:45.697998-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:31:08.78599-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bQshqmfADQC99ZF4DvhR+w=="
				},
				"code" : "border := BlBorder builder\r\t\tpaint: Color red;\r\t\twidth: 1;\r\t\tdashed;\r\t\tbuild.\rel := BlElement new\r\t\tgeometry: (BlNormalizedPolyline\r\t\t\t\tvertices: {1 @ 2.\r\t\t\t\t\t\t3 @ 4.\r\t\t\t\t\t\t4 @ 3});\r\t\tborder: border;\r\t\toutskirts: BlOutskirts centered"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:32:40.684498-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:33:32.666467-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jANkpmHADQC5+Y7tDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "At first, I tried creating a BlStrokeStyle instance and using the {{gtMethod:name=BlBorder>>style:}} method to set it. However, the BlBorder class is apparently designed to be immutable, so doing this raised an error."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:33:46.976313-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:43:00.342584-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "InFlFG/ADQCLaLukDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Realizing that I needed to initialize my border with all of its attributes, I looked into how the constructor in the above example is implemented, and it uses a separate {{gtClass:name=BlBorderBuilder}} to put its own instances together. The class comment for that builder class shows sending `#builder` to BlBorder itself, so I used that as the \"public interface\" to getting, populating, and building a builder to produce an instance of BlBorder."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:44:26.31325-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:44:31.75232-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0wRLN2/ADQCX5ShXDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Reflection on Builder Pattern"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:44:32.784132-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:44:37.207174-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "y9ezO2/ADQCfATgMDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Coming from a background heavy in Clojure, my default sensibility for creating a \"builder\" interface for something like this would have been to accept a generic Dictionary with entries representing the various options of the border class."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:44:37.516964-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-08-29T06:44:43.943818-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QQ38O2/ADQCfEImGDvhR+w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "TODO Discovery of \"keys\" vs. \"methods\", "
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-08-26T22:19:38.929681-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-08-26T22:22:42.970459-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "II. GtPlotterLineChart Walk-through"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "e88f5df2-3fc0-0d00-b67f-1b4d0ef851fb"
	}
}